
### *Step-by-Step Instructions to Run the Python Script*

---

### *Step 1: Install MySQL*

1. *Download and Install MySQL*:
   - If you don't have MySQL installed yet, go to the [MySQL Downloads Page](https://dev.mysql.com/downloads/installer/).
   - Download the *MySQL Installer* for your operating system and follow the installation instructions.

2. *Set Up MySQL*:
   - During the installation, you will be asked to set up a *root password*. Remember this password as you will use it to connect to the database from Python.
   - Install *MySQL Workbench* (optional) to make it easier to manage databases visually.

---

### *Step 2: Create Database and Table in MySQL*

You need to create a *database* and a *table* in MySQL to store employee information.

1. *Open MySQL Workbench* (or use the command line) and connect to your local MySQL server.
   
2. *Create a Database*:
   - Open a new query tab and run the following SQL commands:
   
   sql
   CREATE DATABASE employee_db;
   USE employee_db;
   

3. *Create the Employees Table*:
   - Run the following SQL query to create the Employees table where you will store employee data:

   sql
   CREATE TABLE Employees (
       id INT AUTO_INCREMENT PRIMARY KEY,
       name VARCHAR(100),
       position VARCHAR(100),
       salary INT
   );
   

---

### *Step 3: Install Python and Required Libraries*

1. *Install Python*:
   - If you haven't installed Python yet, download it from the official site: [Download Python](https://www.python.org/downloads/).
   - *Ensure Python is installed*: Open a terminal/command prompt and type:
     bash
     python --version
     

2. *Install MySQL Connector for Python*:
   - You need to install the *MySQL connector* to allow Python to communicate with the MySQL database.
   - Open the terminal (command prompt on Windows or Terminal on Mac/Linux), and run the following command:
     bash
     pip install mysql-connector-python
     

---

### *Step 4: Prepare the Python Script*

1. *Create the Python Script File*:
   - Open a text editor or an IDE (like *Visual Studio Code, **PyCharm, or **Notepad*).
   - Create a new file and name it employee_manager.py.

2. *Copy the Python Script Code*:
   - Copy the following code into the file you just created (employee_manager.py):

   python
   import mysql.connector

   # Function to connect to the database
   def connect_db():
       try:
           # Establishing the connection
           connection = mysql.connector.connect(
               host="localhost",        # MySQL server address (localhost is common if running MySQL locally)
               user="root",             # Your MySQL username (for example, 'root' is the default on many systems)
               password="password",     # Your MySQL password (replace with the password you set)
               database="employee_db"   # Your database name (you should create this database beforehand in MySQL)
           )
           return connection
       except mysql.connector.Error as err:
           print(f"Error: {err}")
           return None

   # Function to add a new employee
   def add_employee():
       name = input("Enter employee name: ")
       position = input("Enter employee position: ")
       salary = int(input("Enter employee salary: "))
       
       connection = connect_db()
       if connection:
           cursor = connection.cursor()
           cursor.execute("INSERT INTO Employees (name, position, salary) VALUES (%s, %s, %s)", (name, position, salary))
           connection.commit()
           print("Employee added successfully.")
           cursor.close()
           connection.close()

   # Function to view all employees
   def view_employees():
       connection = connect_db()
       if connection:
           cursor = connection.cursor()
           cursor.execute("SELECT * FROM Employees")
           rows = cursor.fetchall()
           print("Employees List:")
           for row in rows:
               print(f"ID: {row[0]}, Name: {row[1]}, Position: {row[2]}, Salary: {row[3]}")
           cursor.close()
           connection.close()

   # Function to edit employee details
   def edit_employee():
       employee_id = int(input("Enter employee ID to edit: "))
       name = input("Enter new name: ")
       position = input("Enter new position: ")
       salary = int(input("Enter new salary: "))
       
       connection = connect_db()
       if connection:
           cursor = connection.cursor()
           cursor.execute("""
               UPDATE Employees
               SET name = %s, position = %s, salary = %s
               WHERE id = %s
           """, (name, position, salary, employee_id))
           connection.commit()
           print("Employee details updated successfully.")
           cursor.close()
           connection.close()

   # Function to delete an employee
   def delete_employee():
       employee_id = int(input("Enter employee ID to delete: "))
       
       connection = connect_db()
       if connection:
           cursor = connection.cursor()
           cursor.execute("DELETE FROM Employees WHERE id = %s", (employee_id,))
           connection.commit()
           print("Employee deleted successfully.")
           cursor.close()
           connection.close()

   # Main function to navigate between operations
   def main():
       while True:
           print("\nEmployee Database Operations")
           print("1. Add Employee")
           print("2. View Employees")
           print("3. Edit Employee")
           print("4. Delete Employee")
           print("5. Exit")
           
           choice = input("Enter choice (1-5): ")
           
           if choice == '1':
               add_employee()
           elif choice == '2':
               view_employees()
           elif choice == '3':
               edit_employee()
           elif choice == '4':
               delete_employee()
           elif choice == '5':
               print("Exiting program.")
               break
           else:
               print("Invalid choice! Please enter a number between 1 and 5.")

   if __name__ == "__main__":
       main()
   

3. *Edit MySQL Credentials*:
   - In the connect_db() function, change the password="password" to the password you set during the MySQL installation (the root user password).
   - Ensure the database name is set correctly (in this case, employee_db).

---

### *Step 5: Run the Python Script*

1. *Navigate to the Script's Folder*:
   - Open the *Command Prompt* (Windows) or *Terminal* (Mac/Linux).
   - Use the cd command to navigate to the folder where your Python script (employee_manager.py) is saved.
     For example:
     bash
     cd C:\Users\YourUsername\Documents\Projects
     

2. *Run the Script*:
   - In the terminal, run the following command to start the script:
     bash
     python employee_manager.py
     
     or for *Python 3.x*:
     bash
     python3 employee_manager.py
     

3. *Follow the Menu*:
   - The script should display the following menu:
     
     Employee Database Operations
     1. Add Employee
     2. View Employees
     3. Edit Employee
     4. Delete Employee
     5. Exit
     Enter choice (1-5):
     

4. *Enter a Choice*:
   - Select an option by typing 1, 2, 3, or 4 and follow the prompts to add, view, edit, or delete employee records.

---

### *Troubleshooting*:

1. *Error: Connection Failed*: If the program can't connect to MySQL, ensure that:
   - MySQL server is running.
   - The credentials (username, password, database name) are correct.

2. *Database/Table Errors*: Make sure the employee_db database and Employees table are set up in MySQL.

Let me know if you encounter any issues along the way, and I'll guide you through fixing them!